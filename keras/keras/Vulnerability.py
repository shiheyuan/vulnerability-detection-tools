from keras.models import Sequential
from keras.layers import Dense, Flatten
from keras.layers import LSTM
from keras.utils import to_categorical

import scipy.io as sio
import numpy as np


model = Sequential()


mat_train = '/Users/linhang/Desktop/data/NASA/NASATrain/cm1train.mat'
data_train = sio.loadmat(mat_train)
dataA_train = data_train['cm1train'][0][0]
dataB_train = data_train['cm1train'][0][1]
dataC_train = data_train['cm1train'][0][2]
data_train = np.concatenate((dataA_train, dataB_train, dataC_train), axis=0)
x_train = np.array(data_train[:,0:37])
x_train = np.reshape(x_train, (x_train.shape[0], 1, x_train.shape[1]))
y_train = np.array(data_train[:,37])
y_train = to_categorical(y_train)
#######################################################################

mat_test = '/Users/linhang/Desktop/data/NASA/NASATest/cm1test.mat'
data_test = sio.loadmat(mat_test)
dataA_test = data_test['cm1test'][0][0]
dataB_test = data_test['cm1test'][0][1]
dataC_test = data_test['cm1test'][0][2]
data_test = np.concatenate((dataA_test, dataB_test, dataC_test), axis=0)

x_test = np.array(data_test[0:786,0:37])
x_test = np.reshape(x_test, (x_test.shape[0], 1, x_test.shape[1]))
y_test = np.array(data_test[0:786,37])
y_test = to_categorical(y_test)

#######################################################################
model.add(LSTM(128, return_sequences=True, input_shape=(1, 37)))
model.add(Dense(units=64, activation='relu'))
model.add(Flatten())
model.add(Dense(2, activation='softmax'))
model.compile(loss='categorical_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])

#######################################################################

model.fit(x_train, y_train, epochs=5, batch_size=128, verbose=1)
# model.summary()
score = model.evaluate(x_test, y_test,batch_size=128, verbose=1)
print(score)